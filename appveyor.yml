environment:

  matrix:

    # For Python versions available on Appveyor, see
    # https://www.appveyor.com/docs/windows-images-software/#python
    # The list here is complete (excluding Python 2.6, which
    # isn't covered by this document) at the time of writing.

    - PYTHON: "C:\\Python36"
    - PYTHON: "C:\\Python37"
    - PYTHON: "C:\\Python38"
    - PYTHON: "C:\\Python36-x64"
    - PYTHON: "C:\\Python37-x64"
    - PYTHON: "C:\\Python38-x64"

install:
  # We need wheel installed to build wheels
  - "%PYTHON%\\python.exe -m pip install wheel"
  - "%PYTHON%\\python.exe -m pip install pythran"
  - "%PYTHON%\\python.exe -m pip install pythran-openblas"
  # currently pythran build fails with numpy 1.20
  - "%PYTHON%\\python.exe -m pip install numpy==1.19"
  - "%PYTHON%\\python.exe -m pip install scipy"
  - cmd: echo [compiler] > %HOMEDRIVE%%HOMEPATH%/.pythranrc."
  - cmd: echo CC=clang-cl.exe >> %HOMEDRIVE%%HOMEPATH%/.pythranrc.
  - cmd: echo CXX=clang-cl.exe >> %HOMEDRIVE%%HOMEPATH%/.pythranrc.
  - cmd: echo blas=pythran-openblas >> %HOMEDRIVE%%HOMEPATH%/.pythranrc.

build: off

test_script:
  # Put your test command here.
  # If you don't need to build C extensions on 64-bit Python 3.3 or 3.4,
  # you can remove "build.cmd" from the front of the command, as it's
  # only needed to support those cases.
  # Note that you must use the environment variable %PYTHON% to refer to
  # the interpreter you're using - Appveyor does not do anything special
  # to put the Python version you want to use on PATH.
  # - "build.cmd %PYTHON%\\python.exe setup.py test"

after_test:
  # This step builds your wheels.
  # Again, you only need build.cmd if you're building C extensions for
  # 64-bit Python 3.3/3.4. And you need to use %PYTHON% to get the correct
  # interpreter
  - "%PYTHON%\\python.exe setup.py bdist_wheel"

artifacts:
  # bdist_wheel puts your built wheel in the dist directory
  - path: dist\*
    name: wheelpkg

#on_success:
#  You can use this step to upload your artifacts to a public website.
#  See Appveyor's documentation for more details. Or you can simply
#  access your wheels from the Appveyor "artifacts" tab for your build.

deploy:
  #release: qampy-v$(appveyor_build_version)
  description: 'QAMpy release'
  provider: GitHub
  auth_token:
    secure: 0fG/Gn1ePDpYJD5FifOSndvrDAYqEtZLbaVksQUlSzor2NGtTcErEanFMf95lGsz # your encrypted token from GitHub
  artifact: wheelpkg # upload all wheel packages to release assets
  draft: true
  prerelease: false
  on:
    #branch: master                 # release from master branch only
    APPVEYOR_REPO_TAG: true        # deploy on tag push only
